let socket = null;
let activeChatId = null;
let login = "";
let selectedChatForAddUser = null;
let chats = [];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const logs = document.getElementById("logs");
const chatList = document.getElementById("chatList");
const messageHistory = document.getElementById("messageHistory");
const userLoginElement = document.getElementById("userLogin");
const logoutBtn = document.getElementById("logoutBtn");
const sendMessageBtn = document.getElementById("sendMessageBtn");
const messageInput = document.getElementById("messageInput");
const newChatBtn = document.getElementById("newChatBtn");
const chatTypeModal = document.getElementById("chatTypeModal");
const publicChatBtn = document.getElementById("publicChatBtn");
const privateChatBtn = document.getElementById("privateChatBtn");
const addUserModal = document.getElementById("addUserModal");
const addUserInput = document.getElementById("addUserInput");
const cancelAddUserBtn = document.getElementById("cancelAddUserBtn");
const confirmAddUserBtn = document.getElementById("confirmAddUserBtn");

function log(msg) {
  logs.innerHTML += `<div>${msg}</div>`;
  logs.scrollTop = logs.scrollHeight;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function checkAuth() {
  try {
    const response = await fetch('/api/auth/check', {
      method: 'GET',
      credentials: 'include'
    });
    return response.ok;
  } catch (error) {
    console.error("Auth check failed:", error);
    return false;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
async function refreshTokens() {
  try {
    const response = await fetch('/api/auth/refresh', {
      method: 'POST',
      credentials: 'include'
    });
    return response.ok;
  } catch (error) {
    console.error("Token refresh failed:", error);
    return false;
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
async function connectWebSocket() {
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  const isAuth = await checkAuth();
  if (!isAuth) {
    // 2. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    const tokensRefreshed = await refreshTokens();
    if (!tokensRefreshed) {
      log("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞");
      window.location.href = "/auth.html";
      return;
    }
  }

  // 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
  try {
    log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å –ª–æ–≥–∏–Ω–æ–º: ${login}`);
    socket = new WebSocket(`ws://localhost:8080/chat?login=${encodeURIComponent(login)}`);
    
    socket.onopen = () => {
      log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
      sendEvent("all_user_chats", {});
    };
    
    socket.onmessage = (event) => {
      try {
        const rawMsg = event.data;
        const msg = JSON.parse(rawMsg);
        log(`üì° –ü–æ–ª—É—á–µ–Ω–æ: ${JSON.stringify(msg)}`);
        
        switch (msg.event_type) {
          case "all_user_chats":
            if (msg.data === null || !Array.isArray(msg.data)) {
              chats = [];
            } else {
              chats = msg.data;
            }
            log(`üìÑ –ü–æ–ª—É—á–µ–Ω—ã —á–∞—Ç—ã: ${JSON.stringify(chats)}`);
            renderChatList(chats);
            break;
            
          case "message_history":
            log(`üì¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${JSON.stringify(msg.data)}`);
            renderMessageHistory(msg.data);
            break;
            
          case "add_user_to_chat":
            log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${JSON.stringify(msg.data)}`);
            const newChat = { chat_id: msg.data.chat_id };
            if (!chats.some(chat => chat.chat_id === newChat.chat_id)) {
              chats.push(newChat);
              renderChatList(chats);
            }
            break;
            
          case "new_chat":
            log(`üÜï –°–æ–∑–¥–∞–Ω —á–∞—Ç: ${JSON.stringify(msg.data)}`);
            break;
            
          case "set_active_chat":
            log(`üëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${JSON.stringify(msg.data)}`);
            break;
            
          case "send_message":
            log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(msg.data)}`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç
            if (msg.data.chat_id === activeChatId) {
              const message = document.createElement("div");
              message.className = "mb-2";
              message.textContent = `${msg.data.sender_login}: ${msg.data.content}`;
              messageHistory.appendChild(message);
              messageHistory.scrollTop = messageHistory.scrollHeight;
            } else {
              // –í–´–î–ï–õ–ï–ù–ò–ï –ß–ê–¢–ê –ü–†–ò –ü–û–õ–£–ß–ï–ù–ò–ò –°–û–û–ë–©–ï–ù–ò–Ø (–ó–ê–ü–†–û–° 2)
              // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞ –ø–æ ID
              const chatElement = document.getElementById(`chat-item-${msg.data.chat_id}`);
              if (chatElement) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (!chatElement.querySelector('.new-message-indicator')) {
                  const indicator = document.createElement('span');
                  indicator.className = 'new-message-indicator bg-red-500 text-white text-xs rounded-full px-2 py-1 ml-2';
                  indicator.textContent = '–ù–æ–≤–æ–µ';
                  chatElement.appendChild(indicator);
                }
                
                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                chatElement.classList.add('bg-yellow-100');
              }
            }
            break;
            
          default:
            log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ${msg.event_type}`);
        }
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`);
        log(`üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${event.data}`);
      }
    };
    
    socket.onerror = (err) => {
      log("‚ùå –û—à–∏–±–∫–∞ WebSocket: " + err.message);
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
        connectWebSocket();
      }, 5000);
    };
    
    socket.onclose = (event) => {
      log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${event.code} ${event.reason}`);
      // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ –Ω–µ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (event.code !== 1000 && event.code !== 1001) {
        log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
        setTimeout(() => {
          connectWebSocket();
        }, 5000);
      }
    };
  } catch (err) {
    log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + err.message);
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      connectWebSocket();
    }, 5000);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function sendEvent(type, data) {
  if (!socket || socket.readyState !== WebSocket.OPEN) {
    log(`‚ö†Ô∏è –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${type}": —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    return;
  }
  
  const payload = { event_type: type, data };
  log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${JSON.stringify(payload)}`);
  socket.send(JSON.stringify(payload));
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
function renderChatList(chats = []) {
  chatList.innerHTML = "";
  if (chats.length === 0) {
    chatList.innerHTML = "<p class='text-gray-500'>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</p>";
    return;
  }
  
  chats.forEach(chat => {
    const li = document.createElement("li");
    // –î–û–ë–ê–í–õ–ï–ù ID –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ß–ê–¢–ê (–í–ê–ñ–ù–û –î–õ–Ø –í–´–î–ï–õ–ï–ù–ò–Ø) (–ó–ê–ü–†–û–° 2)
    li.id = `chat-item-${chat.chat_id}`;
    li.className = "p-2 border-b border-gray-200 hover:bg-gray-100 flex justify-between items-center cursor-pointer";
    
    // –û–¢–ö–†–´–¢–ò–ï –ß–ê–¢–ê –ü–†–ò –ö–õ–ò–ö–ï –ù–ê –í–ï–°–¨ –ë–õ–û–ö (–ó–ê–ü–†–û–° 1)
    li.onclick = () => {
      activeChatId = chat.chat_id;
      sendEvent("set_active_chat", { login: login, chat_id: chat.chat_id });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
      document.querySelectorAll('#chatList li').forEach(item => {
        item.classList.remove('bg-blue-100', 'bg-yellow-100');
        const indicator = item.querySelector('.new-message-indicator');
        if (indicator) indicator.remove();
      });
      
      // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
      li.classList.add('bg-blue-100');
    };

    const span = document.createElement("span");
    span.textContent = `–ß–∞—Ç #${chat.chat_id}`;
    span.className = "flex-1"; // –£–±–∏—Ä–∞–µ–º cursor-pointer –∏–∑ span
    
    const addButton = document.createElement("button");
    addButton.textContent = "+";
    addButton.className = "text-sm bg-blue-100 text-blue-600 px-2 py-1 rounded ml-2";
    addButton.onclick = (e) => {
      e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
      selectedChatForAddUser = chat.chat_id;
      addUserModal.classList.remove("hidden");
    };
    
    li.appendChild(span);
    li.appendChild(addButton);
    chatList.appendChild(li);
  });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function renderMessageHistory(messages) {
  messageHistory.innerHTML = "";
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
  if (messages && Array.isArray(messages)) {
    messages.forEach(msg => {
      const div = document.createElement("div");
      div.className = "mb-2";
      div.textContent = `${msg.sender_login}: ${msg.content}`;
      messageHistory.appendChild(div);
    });
  } else {
    // –ï—Å–ª–∏ messages –ø—É—Å—Ç–æ–π –∏–ª–∏ null, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const div = document.createElement("div");
    div.className = "mb-2 text-gray-500";
    div.textContent = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ";
    messageHistory.appendChild(div);
  }
  
  messageHistory.scrollTop = messageHistory.scrollHeight;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
  log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...");
  
  // 1. –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏–∑ localStorage
  login = localStorage.getItem("userLogin");
  if (!login) {
    log("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞");
    window.location.href = "/auth.html";
    return;
  }
  
  log(`‚úÖ –õ–æ–≥–∏–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ localStorage: ${login}`);
  userLoginElement.textContent = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${login}`;
  
  // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
  await connectWebSocket();
  
  // 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
  logoutBtn.onclick = async () => {
    log("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞");
    try {
      await fetch("/logout", { 
        method: "POST", 
        credentials: "include" 
      });
      localStorage.removeItem("userLogin");
      if (socket) {
        socket.close(1000, "User logged out");
        socket = null;
      }
      log("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      window.location.href = "/auth.html";
    } catch (err) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ${err.message}`);
    }
  };
  
  // 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  sendMessageBtn.onclick = () => {
    if (!activeChatId) {
      log("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω");
      return;
    }
    
    const content = messageInput.value;
    if (!content) {
      log("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ");
      return;
    }
    
    const event = {
      chat_id: activeChatId,
      sender_login: login,
      content: content,
      created_at: new Date().toISOString()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendEvent("send_message", event);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const message = document.createElement("div");
    message.className = "mb-2";
    message.textContent = `${login}: ${content}`;
    messageHistory.appendChild(message);
    messageHistory.scrollTop = messageHistory.scrollHeight;
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    messageInput.value = "";
  };
  
  // –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ü–û –ù–ê–ñ–ê–¢–ò–Æ ENTER (–ó–ê–ü–†–û–° 3)
  messageInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
      sendMessageBtn.click(); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    }
  });
  
  // 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–æ–≤
  newChatBtn.onclick = () => {
    log("üÜï –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞");
    chatTypeModal.classList.remove("hidden");
  };
  
  publicChatBtn.onclick = () => {
    log("üåê –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞");
    chatTypeModal.classList.add("hidden");
    sendEvent("new_chat", { chat_type: "public" });
  };
  
  privateChatBtn.onclick = () => {
    log("üîí –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞");
    chatTypeModal.classList.add("hidden");
    sendEvent("new_chat", { chat_type: "private" });
  };
  
  // 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  cancelAddUserBtn.onclick = () => {
    log("‚ùå –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    addUserModal.classList.add("hidden");
    addUserInput.value = "";
  };
  
  confirmAddUserBtn.onclick = () => {
    const userLogin = addUserInput.value;
    if (!userLogin || !selectedChatForAddUser) {
      log("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç");
      return;
    }
    
    log(`üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLogin} –≤ —á–∞—Ç #${selectedChatForAddUser}`);
    sendEvent("add_user_to_chat", {
      chat_id: selectedChatForAddUser,
      user_login: userLogin
    });
    
    addUserModal.classList.add("hidden");
    addUserInput.value = "";
  };
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  addUserModal.addEventListener('click', (e) => {
    if (e.target === addUserModal) {
      log("‚ùå –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–ª–∏–∫ –≤–Ω–µ –æ–∫–Ω–∞)");
      addUserModal.classList.add("hidden");
      addUserInput.value = "";
    }
  });
  
  log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
});